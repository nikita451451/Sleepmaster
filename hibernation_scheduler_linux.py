import os
import sys
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import platform
import datetime
import threading
import subprocess
import json
import time
import webbrowser
import queue

APP_NAME = "TimeMaster Linux"
APP_VERSION = "3.0"
CONFIG_FILE = os.path.expanduser("~/.timemaster_linux_config.json")

DAYS_OF_WEEK_SHORT = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
DAYS_OF_WEEK_FULL = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
ACTIONS = ["–í—ã–∫–ª—é—á–∏—Ç—å", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", "–°–ø—è—â–∏–π —Ä–µ–∂–∏–º"]

class TimeMasterApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title(f"{APP_NAME} v{APP_VERSION}")
        self.root.geometry("1050x750")
        self.root.minsize(950, 650)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() - 1050) // 2
        y = (self.root.winfo_screenheight() - 750) // 4
        self.root.geometry(f"1050x750+{x}+{y}")
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.scheduler_active = True
        self.message_queue = queue.Queue()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = self.load_config()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_ui()
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.start_scheduler()
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.process_messages()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        self.update_time()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        default_config = {
            "schedule": {
                day: {
                    "enabled": True if i < 5 else False,
                    "on_time": None,
                    "off_time": "23:00",
                    "action": "–í—ã–∫–ª—é—á–∏—Ç—å"
                } for i, day in enumerate(DAYS_OF_WEEK_SHORT)
            },
            "autostart_programs": [],
            "settings": {
                "theme": "light",
                "start_minimized": False,
                "notifications": True
            }
        }
        
        try:
            if os.path.exists(CONFIG_FILE):
                with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except:
            pass
        return default_config

    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=4, ensure_ascii=False)
            return True
        except:
            return False

    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.root.grid_columnconfigure(0, weight=1)
        self.root.grid_rowconfigure(1, weight=1)
        
        # –•–µ–¥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        header = tk.Frame(self.root, height=80, bg="#2c3e50")
        header.grid(row=0, column=0, sticky="ew", columnspan=2)
        header.grid_columnconfigure(0, weight=1)
        
        app_title = tk.Label(
            header,
            text=f"{APP_NAME} v{APP_VERSION}",
            font=("Arial", 28, "bold"),
            fg="#ecf0f1",
            bg="#2c3e50"
        )
        app_title.grid(row=0, column=0, padx=20, sticky="w")
        
        app_subtitle = tk.Label(
            header,
            text="–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –ü–ö",
            font=("Arial", 14),
            fg="#bdc3c7",
            bg="#2c3e50"
        )
        app_subtitle.grid(row=1, column=0, padx=20, sticky="w")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        notebook = ttk.Notebook(self.root)
        notebook.grid(row=1, column=0, padx=20, pady=10, sticky="nsew")
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.schedule_tab = tk.Frame(notebook, bg="white")
        notebook.add(self.schedule_tab, text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        self.create_schedule_ui()
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
        self.programs_tab = tk.Frame(notebook, bg="white")
        notebook.add(self.programs_tab, text="üöÄ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫")
        self.create_programs_ui()
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_tab = tk.Frame(notebook, bg="white")
        notebook.add(self.settings_tab, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.create_settings_ui()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="‚è±Ô∏è –ò–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞...")
        status_frame = tk.Frame(self.root, height=30, bg="#ecf0f1")
        status_frame.grid(row=2, column=0, sticky="ew", padx=20, pady=(0, 10))
        
        status_bar = tk.Label(
            status_frame,
            textvariable=self.status_var,
            anchor="w",
            font=("Arial", 11),
            bg="#ecf0f1",
            justify="left"
        )
        status_bar.pack(fill="x", padx=15)
        
        # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(self.root, bg="white")
        button_frame.grid(row=3, column=0, padx=20, pady=(0, 20), sticky="ew")
        
        self.apply_btn = tk.Button(
            button_frame,
            text="üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
            command=self.apply_changes,
            width=20,
            height=2,
            font=("Arial", 12),
            bg="#27ae60",
            fg="white",
            relief="flat"
        )
        self.apply_btn.pack(side="right", padx=10)
        
        self.now_btn = tk.Button(
            button_frame,
            text="‚ö° –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å",
            command=self.execute_now,
            width=18,
            height=2,
            font=("Arial", 12),
            bg="#3498db",
            fg="white",
            relief="flat"
        )
        self.now_btn.pack(side="right", padx=10)

    def create_schedule_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(
            self.schedule_tab,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é",
            font=("Arial", 20, "bold"),
            bg="white"
        )
        header.pack(pady=(10, 15))
        
        # –¢–∞–±–ª–∏—á–∫–∞ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
        table_frame = tk.Frame(self.schedule_tab, bg="white")
        table_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –°—Ç–æ–ª–±—Ü—ã
        table_frame.columnconfigure(0, weight=1)  # –î–µ–Ω—å
        for i in range(1, 5):  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è, –í—Ä–µ–º—è –≤–∫–ª, –í—Ä–µ–º—è –≤—ã–∫–ª, –î–µ–π—Å—Ç–≤–∏–µ
            table_frame.columnconfigure(i, weight=2)
        table_frame.columnconfigure(5, weight=1)  # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        headers = ["–î–µ–Ω—å", "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", "–í—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è", "–í—Ä–µ–º—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è", "–î–µ–π—Å—Ç–≤–∏–µ", "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"]
        for col, header_text in enumerate(headers):
            header_label = tk.Label(
                table_frame,
                text=header_text,
                font=("Arial", 14, "bold"),
                bg="#3498db",
                fg="white",
                relief="raised",
                padx=10,
                pady=5
            )
            header_label.grid(row=0, column=col, padx=2, pady=5, sticky="ew")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.day_enabled = {}
        self.on_time_vars = {}
        self.off_time_vars = {}
        self.action_vars = {}
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        for row, day in enumerate(DAYS_OF_WEEK_SHORT, start=1):
            # –î–µ–Ω—å
            day_label = tk.Label(
                table_frame,
                text=DAYS_OF_WEEK_FULL[row-1],
                font=("Arial", 13),
                bg="white"
            )
            day_label.grid(row=row, column=0, padx=5, pady=7, sticky="w")
            
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è
            self.day_enabled[day] = tk.BooleanVar(value=self.config["schedule"][day]["enabled"])
            switch = tk.Checkbutton(
                table_frame,
                variable=self.day_enabled[day],
                bg="white"
            )
            switch.grid(row=row, column=1, padx=10, pady=5)
            
            # –í—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è
            self.on_time_vars[day] = tk.StringVar(
                value=self.config["schedule"][day]["on_time"] or "")
            on_time_entry = tk.Entry(
                table_frame,
                textvariable=self.on_time_vars[day],
                width=12,
                justify="center",
                font=("Arial", 11)
            )
            on_time_entry.grid(row=row, column=2, padx=5, pady=5)
            
            # –í—Ä–µ–º—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è
            self.off_time_vars[day] = tk.StringVar(
                value=self.config["schedule"][day]["off_time"])
            off_time_entry = tk.Entry(
                table_frame,
                textvariable=self.off_time_vars[day],
                width=12,
                justify="center",
                font=("Arial", 11)
            )
            off_time_entry.grid(row=row, column=3, padx=5, pady=5)
            
            # –î–µ–π—Å—Ç–≤–∏–µ
            self.action_vars[day] = tk.StringVar(
                value=self.config["schedule"][day]["action"])
            action_dropdown = ttk.Combobox(
                table_frame,
                textvariable=self.action_vars[day],
                values=ACTIONS,
                width=14,
                state="readonly"
            )
            action_dropdown.grid(row=row, column=4, padx=5, pady=5)
            
            # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            copy_btn = tk.Button(
                table_frame,
                text=f"üìã ‚Üí –í—Å–µ",
                command=lambda d=day: self.copy_day_settings(d),
                width=8,
                height=1,
                font=("Arial", 10),
                bg="#95a5a6",
                fg="white"
            )
            copy_btn.grid(row=row, column=5, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü–µ–π
        table_ctrl_frame = tk.Frame(self.schedule_tab, bg="white")
        table_ctrl_frame.pack(pady=10)
        
        tk.Button(
            table_ctrl_frame,
            text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–Ω–∏",
            command=lambda: self.set_all_days(True),
            width=18,
            bg="#27ae60",
            fg="white"
        ).pack(side="left", padx=5)
        
        tk.Button(
            table_ctrl_frame,
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –¥–Ω–∏",
            command=lambda: self.set_all_days(False),
            width=18,
            bg="#e74c3c",
            fg="white"
        ).pack(side="left", padx=5)
        
        tk.Button(
            table_ctrl_frame,
            text="üîÑ –°–±—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            command=self.reset_schedule,
            width=18,
            bg="#f39c12",
            fg="white"
        ).pack(side="left", padx=5)

    def copy_day_settings(self, day):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–Ω–∏"""
        settings = {
            "enabled": self.day_enabled[day].get(),
            "on_time": self.on_time_vars[day].get(),
            "off_time": self.off_time_vars[day].get(),
            "action": self.action_vars[day].get()
        }
        
        for d in DAYS_OF_WEEK_SHORT:
            if d != day:
                self.day_enabled[d].set(settings["enabled"])
                self.on_time_vars[d].set(settings["on_time"])
                self.off_time_vars[d].set(settings["off_time"])
                self.action_vars[d].set(settings["action"])
        
        self.status_var.set(f"‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ '{day}' —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤—Å–µ –¥–Ω–∏")
        self.root.after(3000, lambda: self.status_var.set("‚úÖ –ì–æ—Ç–æ–≤–æ"))

    def set_all_days(self, state):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π"""
        for day in DAYS_OF_WEEK_SHORT:
            self.day_enabled[day].set(state)
        self.status_var.set(f"‚ö° –í—Å–µ –¥–Ω–∏ {'–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã' if state else '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã'}")

    def reset_schedule(self):
        """–°–±—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        for day in DAYS_OF_WEEK_SHORT:
            self.day_enabled[day].set(True if DAYS_OF_WEEK_SHORT.index(day) < 5 else False)
            self.on_time_vars[day].set("")
            self.off_time_vars[day].set("23:00")
            self.action_vars[day].set("–í—ã–∫–ª—é—á–∏—Ç—å")
        self.status_var.set("‚ö° –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    def create_programs_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(
            self.programs_tab,
            text="–ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞",
            font=("Arial", 20, "bold"),
            bg="white"
        )
        header.pack(pady=(10, 15))
        
        description = tk.Label(
            self.programs_tab,
            text="–ü—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã",
            font=("Arial", 14),
            fg="#7f8c8d",
            bg="white"
        )
        description.pack(pady=(0, 20))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º
        programs_frame = tk.Frame(self.programs_tab, bg="white")
        programs_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞
        header_frame = tk.Frame(programs_frame, bg="#3498db")
        header_frame.pack(fill="x", padx=5, pady=5)
        
        tk.Label(
            header_frame,
            text="–ü—Ä–æ–≥—Ä–∞–º–º–∞",
            font=("Arial", 14, "bold"),
            fg="white",
            bg="#3498db"
        ).pack(side="left", padx=10, pady=5)
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º
        self.programs_list = tk.Frame(programs_frame, bg="white")
        self.programs_list.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º
        self.autostart_program_frames = []
        for program in self.config["autostart_programs"]:
            self.add_program_ui(program)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
        btn_frame = tk.Frame(programs_frame, bg="white")
        btn_frame.pack(fill="x", padx=5, pady=10)
        
        tk.Button(
            btn_frame,
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É",
            command=self.add_program,
            width=20,
            bg="#27ae60",
            fg="white"
        ).pack(side="left", padx=5)
        
        tk.Button(
            btn_frame,
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ",
            command=self.remove_programs,
            width=20,
            bg="#e74c3c",
            fg="white"
        ).pack(side="right", padx=5)

    def add_program_ui(self, program_path):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ UI"""
        frame = tk.Frame(self.programs_list, bg="#ecf0f1", relief="raised", bd=1)
        
        program_name = os.path.basename(program_path)
        tk.Label(
            frame,
            text=program_name,
            font=("Arial", 12),
            anchor="w",
            bg="#ecf0f1"
        ).pack(side="left", padx=10, pady=5, fill="x", expand=True)
        
        btn = tk.Button(
            frame,
            text="üìÇ –ü–æ–∫–∞–∑–∞—Ç—å",
            command=lambda p=program_path: webbrowser.open(os.path.dirname(p)),
            width=10,
            height=1,
            font=("Arial", 10),
            bg="#3498db",
            fg="white"
        )
        btn.pack(side="right", padx=5)
        
        frame.pack(fill="x", pady=3, padx=2)
        self.autostart_program_frames.append((frame, program_path))

    def add_program(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        file_types = [("–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã", "*.sh *.py *.bin"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞",
            filetypes=file_types
        )
        
        if path:
            self.config["autostart_programs"].append(path)
            self.add_program_ui(path)
            self.status_var.set(f"‚úö –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞: {os.path.basename(path)}")

    def remove_programs(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º"""
        self.status_var.set("‚ö° –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞")

    def create_settings_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(
            self.settings_tab,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            font=("Arial", 20, "bold"),
            bg="white"
        )
        header.pack(pady=(10, 15))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        theme_frame = tk.Frame(self.settings_tab, bg="white")
        theme_frame.pack(fill="x", padx=20, pady=15)
        
        tk.Label(
            theme_frame,
            text="–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
            font=("Arial", 14),
            bg="white"
        ).pack(anchor="w", pady=5)
        
        self.theme_var = tk.StringVar(value=self.config["settings"]["theme"])
        theme_combo = ttk.Combobox(
            theme_frame,
            textvariable=self.theme_var,
            values=["light", "dark"],
            width=20,
            state="readonly"
        )
        theme_combo.pack(anchor="w", pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notify_frame = tk.Frame(self.settings_tab, bg="white")
        notify_frame.pack(fill="x", padx=20, pady=15)
        
        self.notify_enabled = tk.BooleanVar(value=self.config["settings"]["notifications"])
        notify_switch = tk.Checkbutton(
            notify_frame,
            text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            variable=self.notify_enabled,
            font=("Arial", 14),
            bg="white"
        )
        notify_switch.pack(anchor="w", pady=5)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        advanced_frame = tk.Frame(self.settings_tab, bg="white")
        advanced_frame.pack(fill="x", padx=20, pady=15)
        
        self.minimize_var = tk.BooleanVar(value=self.config["settings"]["start_minimized"])
        minimize_switch = tk.Checkbutton(
            advanced_frame,
            text="–°–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ —Ç—Ä–µ–π –≤–º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏—è",
            variable=self.minimize_var,
            font=("Arial", 14),
            bg="white"
        )
        minimize_switch.pack(anchor="w", pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Linux
        info_text = """
        –î–ª—è Linux –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
        - –í—ã–∫–ª—é—á–µ–Ω–∏–µ: systemctl poweroff / shutdown -h now
        - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: systemctl reboot / shutdown -r now
        - –°–ø—è—â–∏–π —Ä–µ–∂–∏–º: systemctl suspend
        
        –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ BIOS/UEFI
        """
        
        info_label = tk.Label(
            advanced_frame,
            text=info_text,
            font=("Arial", 12),
            justify="left",
            fg="#7f8c8d",
            bg="white"
        )
        info_label.pack(anchor="w", pady=10)

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler_thread = threading.Thread(target=self.check_schedule, daemon=True)
        self.scheduler_thread.start()

    def check_schedule(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π"""
        while self.scheduler_active:
            now = datetime.datetime.now()
            current_time = now.strftime("%H:%M")
            current_day = now.weekday()  # 0=–ø–Ω, 6=–≤—Å
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            time.sleep(60)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ
            if not self.scheduler_active:
                break
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            day = DAYS_OF_WEEK_SHORT[current_day]
            schedule = self.config["schedule"][day]
            
            if schedule.get("enabled", False):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è
                off_time = schedule.get("off_time")
                if off_time and off_time == current_time:
                    self.execute_action(schedule.get("action", "–í—ã–∫–ª—é—á–∏—Ç—å"))

    def execute_action(self, action):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        action_map = {
            "–í—ã–∫–ª—é—á–∏—Ç—å": "systemctl poweroff",
            "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞": "systemctl reboot", 
            "–°–ø—è—â–∏–π —Ä–µ–∂–∏–º": "systemctl suspend"
        }
        
        cmd = action_map.get(action, "systemctl poweroff")
        try:
            subprocess.run(cmd, shell=True)
            self.status_var.set(f"‚è±Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        except:
            self.status_var.set(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {action}")

    def process_messages(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            while not self.message_queue.empty():
                message = self.message_queue.get_nowait()
                self.status_var.set(message)
        except queue.Empty:
            pass
        
        if self.root.winfo_exists():
            self.root.after(100, self.process_messages)

    def update_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–±–∞—Ä–∞ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º"""
        current_time = datetime.datetime.now().strftime("%H:%M:%S")
        self.status_var.set(f"–°–∏—Å—Ç–µ–º–∞: ‚è±Ô∏è {current_time} | ‚úì –†–µ–∂–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {'–ê–∫—Ç–∏–≤–µ–Ω' if self.scheduler_active else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        self.root.after(1000, self.update_time)

    def apply_changes(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        for day in DAYS_OF_WEEK_SHORT:
            self.config["schedule"][day] = {
                "enabled": self.day_enabled[day].get(),
                "on_time": self.on_time_vars[day].get(),
                "off_time": self.off_time_vars[day].get(),
                "action": self.action_vars[day].get()
            }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.config["settings"] = {
            "theme": self.theme_var.get(),
            "start_minimized": self.minimize_var.get(),
            "notifications": self.notify_enabled.get()
        }
        
        self.save_config()
        self.status_var.set("‚ö° –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        self.root.after(3000, lambda: self.status_var.set("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞"))

    def execute_now(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
        dialog.geometry("400x200")
        dialog.transient(self.root)
        dialog.grab_set()
        
        dialog.grid_columnconfigure(0, weight=1)
        
        tk.Label(
            dialog,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
            font=("Arial", 16)
        ).grid(row=0, column=0, pady=20, padx=20, sticky="w")
        
        selected_action = tk.StringVar(value="–í—ã–∫–ª—é—á–∏—Ç—å")
        action_combo = ttk.Combobox(
            dialog,
            variable=selected_action,
            values=["–í—ã–∫–ª—é—á–∏—Ç—å", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", "–°–ø—è—â–∏–π —Ä–µ–∂–∏–º"],
            width=20,
            state="readonly"
        )
        action_combo.grid(row=1, column=0, pady=10, padx=20, sticky="ew")
        
        def confirm():
            action = selected_action.get()
            self.execute_action(action)
            dialog.destroy()
        
        tk.Button(
            dialog,
            text="–í—ã–ø–æ–ª–Ω–∏—Ç—å",
            command=confirm,
            width=15,
            height=2,
            bg="#e67e22",
            fg="white"
        ).grid(row=2, column=0, pady=15)

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.scheduler_active = False
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.apply_changes()
        self.save_config()
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.root.destroy()

if __name__ == "__main__":
    app = TimeMasterApp()
    app.root.mainloop()